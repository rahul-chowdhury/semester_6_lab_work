/* A simple server in the internet domain using TCP
   The port number is passed as an argument 
   This version runs forever, forking off a separate 
   process for each connection
   gcc server2.c -lsocket
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>

void dostuff(int); /* function prototype */
void error(char *msg)
{
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[])
{
     int sockfd, newsockfd, portno, clilen, pid;
     struct sockaddr_in serv_addr, cli_addr;

     if (argc < 2) {
         fprintf(stderr,"ERROR, no port provided\n");
         exit(1);
     }
     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd < 0) 
        error("ERROR opening socket");
     bzero((char *) &serv_addr, sizeof(serv_addr));
     portno = atoi(argv[1]);
     serv_addr.sin_family = AF_INET;
     serv_addr.sin_addr.s_addr = INADDR_ANY;
     serv_addr.sin_port = htons(portno);
     if (bind(sockfd, (struct sockaddr *) &serv_addr,
              sizeof(serv_addr)) < 0) 
              error("ERROR on binding");
     listen(sockfd,5);
     clilen = sizeof(cli_addr);
     while(1) 
     {
         newsockfd = accept(sockfd,(struct sockaddr *) &cli_addr, &clilen);
         if (newsockfd < 0) 
         error("ERROR on accept");
         pid = fork();
         if (pid < 0)
         error("ERROR on fork");
         if (pid == 0)  
         {
              dostuff(newsockfd);
             close(newsockfd);
             exit(0);
   	}
        else 
        {
        	
        	continue;
        }
     } /* end of while */
     close(sockfd);
     return 0; /* we never get here */
}

/******** DOSTUFF() *********************
 There is a separate instance of this function 
 for each connection.  It handles all communication
 once a connnection has been established.
 *****************************************/
void dostuff (int sock)
{
   int n,chars_read,fd;
   char buffer[10],command[10],filename[256],input[256];
   //FILE *f_server,*f_client;   
   bzero(input,256);
   n = read(sock,input,256);
   //strcpy(temp,buffer);
   if (n < 0) error("ERROR reading from socket");
   //printf("Here is the message: %s\n",buffer);
   //n = write(sock,"I got your message",18);
   strcpy(command,strtok(input," "));
   if(strcmp(command,"get")==0)
   {
   	printf("i am here\n");
   	strcpy(filename,strtok(NULL,"\n"));
   	printf("filename: %sfjhgtj\n",filename);
   	//f_client=fopen(argument,"r");
   	fd=open(filename, O_RDONLY);
   	//f_client=fopen(dest_filename,"w+");
   	chars_read=10;
   	while(chars_read==10)
   	{
   		printf("inside while\n");
   		chars_read=read(fd,buffer,10);
   		printf("inside while1\n");
   		n=write(sock,buffer,chars_read);
   		printf("inside while2\n");
   		if (n < 0) 
   			error("ERROR writing to socket");
   			//fwrite(content,1,1,f_client);
      	}
   	//write(sock,"#",1);
   	close(fd);
   	close(sock);
   	//fclose(f_client);
   }
    
   
}
