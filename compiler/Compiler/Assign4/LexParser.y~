%{
	#include<stdio.h>
	#define MAXSIZE 10
	typedef struct Table
	{
		char symbol[10];
		char type[10];
		int value;
		int initialise;
		struct Table *next;
	}SymbolTable;
	extern SymbolTable symTable[MAXSIZE];
	extern int search(SymbolTable symTable[],char symbol[]);
	extern void update(SymbolTable symTable[],char symbol[],int value);
	extern int getValue(SymbolTable symTable[],char symbol[]);
	extern void display(SymbolTable symTable[]);
	extern int count,mylineno;
	void yyerror(char *s);
%}

%union {char *str;int num;}
%start statements
%token SPACE 
%token DATATYPE 
%token SEMICOLON 
%token COMMA
%token <str> IDENTIFIER
%token <num> NUMBER
%token PLUS
%token SUB
%token MUL
%token DIV
%token MOD
%token ASSIGNMENT
%type <num> expression
%type <num> arithmetic

%%
statements	: declaration					{;}
		| declaration statements			{;}
		| expressions					{;}
		;
		
declaration 	: DATATYPE SPACE IDENTIFIER SEMICOLON		{printf("IDENTIFIER %s has been declared properly\n",$3);}
		| DATATYPE SPACE IDENTIFIER terms SEMICOLON	{printf("IDENTIFIER %s has been declared properly\n",$3);}
		;		

terms		: term terms					{;}
		| term						{;}
		;

term		: COMMA IDENTIFIER				{printf("IDENTIFIER %s has been declared properly\n",$2);}
		| COMMA SPACE IDENTIFIER			{printf("IDENTIFIER %s has been declared properly\n",$3);}
		; 

expressions	: expression expressions 			{;}
		| expression					{;}
		;
		
expression	: IDENTIFIER ASSIGNMENT arithmetic SEMICOLON	{
									if(search(symTable,$1)==-1)
									{
										count++;
										printf("Error %d: IDENTIFIER %s in line no. %d is not declared\n",count,$1,mylineno);
									}
									else
									update(symTable,$1,$3);
									printf("%s= %d\n",$1, $3);
								}
		;
		
arithmetic	: NUMBER PLUS NUMBER 			{ $$ = $1 + $3;}
		| NUMBER SUB NUMBER 			{ $$ = $1 - $3;}
		| IDENTIFIER PLUS IDENTIFIER		{ 
								if(search(symTable,$1)==-1 && search(symTable,$3)==-1)
								{
									count++;
									printf("Error %d: IDENTIFIER %s in line no. %d is not declared\n",count,$1,mylineno);
									count++;
									printf("Error %d: IDENTIFIER %s in line no. %d is not declared\n",count,$3,mylineno);
								}
								else if(search(symTable,$1)==-1)
								{
									count++;
									printf("Error %d: IDENTIFIER %s in line no. %d is not declared\n",count,$1,mylineno);
								}
								else if(search(symTable,$3)==-1)
								{
									count++;
									printf("Error %d: IDENTIFIER %s in line no. %d is not declared\n",count,$3,mylineno);
								}
								else
								{
									$$=getValue(symTable,$1)+getValue(symTable,$3);
								}
							}
		| IDENTIFIER SUB IDENTIFIER		{;}
		| NUMBER				{ $$=$1;}
		;


%%

void yyerror(char *s)
{
	fprintf(stderr,"%s\n",s);
}


